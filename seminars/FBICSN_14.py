# -*- coding: utf-8 -*-
"""описис_14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZtikKXGHo0w3354acvVJ1AUi7xP3O24x

Провести передачу первичного сигнала по системе передачи с временным разделением каналов с использованием амплитудной импульсной модуляции.
"""

import numpy as np
import math
import matplotlib.pyplot as plt

def f2w(f):
    return 2.0*math.pi*f

def filter(time, signal, fl, fh):
    n = len(signal)
    freq = np.fft.fftfreq(n, time[1]-time[0])
    spectr = np.fft.fft(signal)
    for i in range(n):
        if not fl < abs(freq[i]) < fh:
            spectr[i] = 0+0j
    return np.fft.ifft(spectr)
fs = float(input('Частота первичного сигнала '))
T = float(input('Временной интервал '))
n = int(input('Число временных отсчетов '))
h = T / n
m = float(input('Глубина модуляции '))

q = float(input('Скважность '))
Timp = 1 / (1.5*2*fs)
tau = Timp / q
Aimp = 1
Nimp = T / Timp

imp = [0] * n
for i in range(int(Nimp)-1):
    for j in range(int(i * n/Nimp), int(i * n/Nimp + n/Nimp/q)):
        imp[j] = Aimp

sig1 = [0] * n
time = [0] * n
sam1 = [0] * n

#Формирование первичных сигналов в каналах на входе СП ВРК
for i in range(n):
    time[i] = i*h
    sig1[i] = 1.0 * math.cos(f2w(fs)*time[i])


spec1 = np.fft.fft(sig1)
freq = np.fft.fftfreq(n, T/n)
#Амплитудная модуляция
for i in range(n):
    sam1[i] = imp[i] * (1 + m * sig1[i] / 2.0)


spec_sam = np.fft.fft(sam1)

mch1 = [0] * n
#Демодуляция канальных сигналов
for i in range(n):
    mch1[i] = (1.0 + m * math.cos(f2w(fs)*time[i]))*sam1[i]

#Канальные ФНЧ для выделения первичных сигналов
rsig1 = filter(time, mch1, 1, fs+1).real

plt.figure(figsize = (15, 10))
plt.subplot(3, 3, 1)
plt.title('Первичные сигналы')
plt.plot(time, sig1)
plt.subplot(3, 3, 2)
plt.title('Спектры сигналов на входе')
plt.xlim(left = 0, right = fs*2)
plt.plot(freq, np.hypot(spec1.real, spec1.imag)/n*2.0)
plt.subplot(3, 3, 3)
plt.title('Сигнал переносчик')
plt.plot(time, imp)
plt.subplot(3, 3, 4)
plt.title('АИМ сигнал')
plt.plot(time, sam1)
plt.subplot(3, 3, 5)
plt.title('Спектр АИМ сигнала')
plt.xlim(left = 0, right = 1/tau * 5)
plt.plot(freq, np.hypot(spec_sam.real, spec_sam.imag)/n*2.0)
plt.subplot(3, 3, 6)
plt.title('Демодуляция канального сигнала')
plt.plot(time, mch1)
plt.subplot(3, 3, 7)
plt.title('Спектр демодулированных канальных сигналов')
spec_dam1 = np.fft.fft(mch1)
plt.xlim(left = 0, right = 1/tau * 5)
plt.plot(freq, np.hypot(spec_dam1.real, spec_dam1.imag)/n*2.0)
plt.subplot(3, 3, 8)
plt.title('Демодулированный АИМ сигнал')
plt.plot(time, rsig1)
plt.show()

import numpy as np
import math
import matplotlib.pyplot as plt

def f2w(f):
    return 2.0 * math.pi * f

def filter(time, signal, fl, fh):
    n = len(signal)
    freq = np.fft.fftfreq(n, time[1] - time[0])
    spectr = np.fft.fft(signal)
    for i in range(n):
        if not fl < abs(freq[i]) < fh:
            spectr[i] = 0 + 0j
    return np.fft.ifft(spectr)

# Ввод параметров
fs1 = float(input('Частота первого первичного сигнала: '))
fs2 = float(input('Частота второго первичного сигнала: '))
fs3 = float(input('Частота третьего первичного сигнала: '))
T = float(input('Временной интервал: '))
n = int(input('Число временных отсчетов: '))
h = T / n
m = float(input('Глубина модуляции: '))
q = float(input('Скважность: '))

# Параметры импульсов
Timp = 1 / (3 * max(fs1, fs2, fs3))  # Период импульсов для трёх каналов
tau = Timp / q  # Длительность импульса
Aimp = 1  # Амплитуда импульса
Nimp = int(T / Timp)  # Число импульсов

# Формирование временной оси
time = np.linspace(0, T, n)

# Формирование первичных сигналов
sig1 = np.cos(f2w(fs1) * time)
sig2 = np.cos(f2w(fs2) * time)
sig3 = np.cos(f2w(fs3) * time)

# Генерация импульсов для каждого канала
imp1 = np.zeros(n)
imp2 = np.zeros(n)
imp3 = np.zeros(n)

for i in range(Nimp):
    start_idx = int(i * n / Nimp)
    end_idx = int(start_idx + n / Nimp / q)

    if i % 3 == 0:  # Первый канал
        imp1[start_idx:end_idx] = Aimp
    elif i % 3 == 1:  # Второй канал
        imp2[start_idx:end_idx] = Aimp
    else:  # Третий канал
        imp3[start_idx:end_idx] = Aimp

# Мультиплексирование сигналов через АИМ
sam1 = imp1 * (1 + m * sig1 / 2.0)
sam2 = imp2 * (1 + m * sig2 / 2.0)
sam3 = imp3 * (1 + m * sig3 / 2.0)

# Комбинированный сигнал
combined_signal = sam1 + sam2 + sam3

# Спектры сигналов
freq = np.fft.fftfreq(n, h)
spec1 = np.fft.fft(sig1)
spec2 = np.fft.fft(sig2)
spec3 = np.fft.fft(sig3)
spec_sam1 = np.fft.fft(sam1)
spec_sam2 = np.fft.fft(sam2)
spec_sam3 = np.fft.fft(sam3)
spec_combined = np.fft.fft(combined_signal)

# Демодуляция
demod1 = combined_signal * imp1
demod2 = combined_signal * imp2
demod3 = combined_signal * imp3

# Спектры демодулированных сигналов
spec_demod1 = np.fft.fft(demod1)
spec_demod2 = np.fft.fft(demod2)
spec_demod3 = np.fft.fft(demod3)

# Фильтрация для выделения первичных сигналов
rsig1 = filter(time, demod1, 0, fs1 + 1).real
rsig2 = filter(time, demod2, 0, fs2 + 1).real
rsig3 = filter(time, demod3, 0, fs3 + 1).real

# Построение графиков
plt.figure(figsize=(15, 10))

# 1. Первичные сигналы
plt.subplot(4, 2, 1)
plt.title('Первичные сигналы')
plt.plot(time, sig1, label='Сигнал 1')
plt.plot(time, sig2, label='Сигнал 2')
plt.plot(time, sig3, label='Сигнал 3')
plt.legend()

# 2. Спектры сигналов на входе
plt.subplot(4, 2, 2)
plt.title('Спектры сигналов на входе')
plt.xlim(0, 2 * max(fs1, fs2, fs3))
plt.plot(freq, np.abs(spec1) / n * 2, label='Сигнал 1')
plt.plot(freq, np.abs(spec2) / n * 2, label='Сигнал 2')
plt.plot(freq, np.abs(spec3) / n * 2, label='Сигнал 3')
plt.legend()

# 3. Сигналы переносчиков
plt.subplot(4, 2, 3)
plt.title('Сигналы переносчиков')
plt.plot(time, imp1, label='Канал 1')
plt.plot(time, imp2, label='Канал 2')
plt.plot(time, imp3, label='Канал 3')
plt.legend()

# 4. АИМ сигналы
plt.subplot(4, 2, 4)
plt.title('АИМ сигналы')
plt.plot(time, sam1, label='Канал 1')
plt.plot(time, sam2, label='Канал 2')
plt.plot(time, sam3, label='Канал 3')
plt.legend()

# 5. Спектры АИМ сигналов
plt.subplot(4, 2, 5)
plt.title('Спектры АИМ сигналов')
plt.xlim(0, 1 / tau * 5)
plt.plot(freq, np.abs(spec_sam1) / n * 2, label='Канал 1')
plt.plot(freq, np.abs(spec_sam2) / n * 2, label='Канал 2')
plt.plot(freq, np.abs(spec_sam3) / n * 2, label='Канал 3')
plt.legend()

# 6. Демодуляция канальных сигналов
plt.subplot(4, 2, 6)
plt.title('Демодуляция канальных сигналов')
plt.plot(time, demod1, label='Канал 1')
plt.plot(time, demod2, label='Канал 2')
plt.plot(time, demod3, label='Канал 3')
plt.legend()

# 7. Спектры демодулированных сигналов
plt.subplot(4, 2, 7)
plt.title('Спектры демодулированных сигналов')
plt.xlim(0, 1 / tau * 5)
plt.plot(freq, np.abs(spec_demod1) / n * 2, label='Канал 1')
plt.plot(freq, np.abs(spec_demod2) / n * 2, label='Канал 2')
plt.plot(freq, np.abs(spec_demod3) / n * 2, label='Канал 3')
plt.legend()

# 8. Восстановленные сигналы
plt.subplot(4, 2, 8)
plt.title('Восстановленные сигналы')
plt.plot(time, rsig1, label='Сигнал 1')
plt.plot(time, rsig2, label='Сигнал 2')
plt.plot(time, rsig3, label='Сигнал 3')
plt.legend()

plt.tight_layout()
plt.show()